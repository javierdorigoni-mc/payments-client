@page "/accounts"
@using System.Collections.Immutable
@using PaymentsClient.Domain.Accounts
@inject NavigationManager _navigationManager
@inject IAccountsService _accountsService
@rendermode InteractiveServer

<PageTitle>Accounts</PageTitle>

<h1>List of Accounts</h1>

<label class="form-label" for="accessToken">Access Token: </label>
<input class="form-text" type="text" @bind="_accessToken" id="accessToken" />

<button class="btn btn-primary" @onclick="GetAccountsAsync">Fetch Data</button>

@if (_accounts == null || _accounts?.Length == 0)
{
    <p>
        <em>Please provide an access token and click on Fetch Data</em>
    </p>
}
@if (_accounts != null && _accounts?.Length > 0 && !_loading)
{
    <table class="table">
        <thead>
        <tr>
            <th>Account Id</th>
            <th>Name</th>
            <th>Provider Id</th>
            <th>Bban</th>
            <th>Bban Details</th>
            <th>Iban</th>
            <th>Card</th>
            <th>Booked Balance</th>
            <th>Available Balance</th>
            <th>Type</th>      
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var account in _accounts!)
        {
            <tr>
                <td>@account.Id</td>
                <td>@account.Name</td>
                <td>@account.ProviderId</td>
                <td>
                    Type: @account.AccountNumberDetails?.BbanType &nbsp;
                    Number: @account.AccountNumberDetails?.Bban
                </td>
                <td>
                    Bank Code: @account.AccountNumberDetails?.BbanDetails?.BankCode &nbsp; 
                    Bank Number: @account.AccountNumberDetails?.BbanDetails?.AccountNumber
                </td>
                <td>@account.AccountNumberDetails?.Iban</td>
                <td>
                    PanNumber: @(account.AccountNumberDetails?.Card?.MaskedPanNumber ?? string.Empty) &nbsp; 
                    Expiry: @account.AccountNumberDetails?.Card?.ExpireMonth / @account.AccountNumberDetails?.Card?.ExpireYear
                </td>
                <td>@account.BookedBalance?.Currency &nbsp; @account.BookedBalance?.Value.ToString()</td>
                <td>@account.AvailableBalance?.Currency &nbsp; @account.AvailableBalance?.Value.ToString()</td>
                <td>@account.Type</td>
                <td><button class="btn btn-info" @onclick="() => RedirectToTransactions(account.Id)">View Transactions</button></td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_loading)
{
    <p>
        <em>Loading Data...</em>
    </p>
}

@code {
    private ImmutableArray<AccountModel>? _accounts;
    private string? _accessToken;
    private bool _loading;

    private async Task GetAccountsAsync()
    {
        _loading = true;
        if (string.IsNullOrWhiteSpace(_accessToken))
        {
            return;
        }

        var getAccountsResponse = await _accountsService.GetAccountsAsync(new GetAccountsRequest(_accessToken));
        
        if (getAccountsResponse.IsSuccessful is false)
        {
            return;
        }
        
        _accounts = getAccountsResponse.Value!.Accounts;
        _loading = false;
    }

    private void RedirectToTransactions(string? accountId)
    {   
        _navigationManager.NavigateTo($"/transactions/{accountId}");
    }
}